name: Build .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Checkout sources. Depth=0 is for using GitVersion
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x

      # Install and Setup GitVersion
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
    - name: Use GitVersion
      # Step id is used as reference for the output values
      id: gitversion 
      uses: gittools/actions/gitversion/execute@v0

      # Restore, build and test the project
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal

  publish:
    needs: build
    runs-on: ubuntu-latest
    name: Create nuget Release
    if: ${{ github.event.pull_request.merged }}
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x
    # Create a nuget Release      
    - name: Pack the NuGet package
      run: dotnet pack ./LegoDimensions --no-build --configuration Release --output ./artifacts

    # Publish all NuGet packages to NuGet.org
    # Use --skip-duplicate to prevent errors if a package with the same version already exists.
    # If you retry a failed workflow, already published packages will be skipped without error.
    - name: Publish separate tools to NuGet
      run: |
          foreach($file in (Get-ChildItem "./artifacts" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_TOOLS }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
    
    # Create the CHANGELOG for this release
    # We'll compile it from last the version
    # to the current commit
    - name: Build Changelog
      id: github_release
      uses: mikepenz/release-changelog-builder-action@v1
      with:
        configuration: "./changelog-config.json"
        fromTag: ${{ steps.gitversion.outputs.VersionSourceSha }}
        toTag: ${{ steps.gitversion.outputs.Sha }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}